56 Growth Curve An and Visualization Using R simulation to gener-option â€¢ to use Markov Chain Monte Carlo (MCMC) ate a 95% confidence interval for each para,meter estimate (e.g., Bas en et al., 2008). However, this approach is limited in terms of the kinds of random effect ng p-values can be severely anti-structures that it can handle and the resulti conservative. That is. p < 0.05 is meant- to indicate a less than 5% probability of falsely detecting a non-existent effect , but the actual false alarm rate may be substantially higher (as high as 20% in some cases; for a detailed analysis see Barr et al., 2013). A simple alternative is to use the normal distribution as an apfpfrroexeidmoamtioanre. As the number of degrees of freedom increases, the t distribution converges to the normal distribution. This means that when the degrees o relatively large, the normal distribution can be used as an approximation. If the degrees of freedom are sufficiently large, then the specific n1u5mdbegerreeosf degrees of freedom will have little effect. Concretely, the t distribution for 10 degrees of freedom differs substantially from the t distribution for mmodaerle. of freedom but the t distributions for 510 and 515 degrees of freedom essentially identical. Time course data typically involve a large number of observations relative to the number of fixed effect param56e0teorsbsienrvtahteiones For example. in the word learning example there were training blocks for each of 56 participants) and only 6 fixed effect parameters. Because the t distribution converges to the normal distribution when there are many degrees of freedom and because time course data typically have many observations, we can use the normal distribution to calculate approximate p-values. These approximations will be somewhat anticonservative, but some analyses suggest that the anticonservativity will not be too severe (e.g., a false alarm under 10% for p < 0.05; see Barr et al.. 2013). To use the normal approximation, we first turn the model's parameter estimates into a new data frame. The fixed effect parameter estimates can be extracted from the model summary using the coefs function: 
> coefs <- data.frame(coef (summary (m. 2) ) We then look up the p-value that corresponds to th(- ni)oli-tie value of the t-value in the normal distribution (using the pnorm function), subtract it from 1 toget the probability of a. t-value exceeding the observed value, multiplY --111 by 2 to get a two-tailed p-value, and assign it to a new variable (called F) it the coefs data frame > coefs$p <- 2 * (1 - pnorm(abs(coefs$t . value))) We can now see the full set of fixed effect parameter estimates and their err-parameter 
> coefs  
(I Estimate S Estimate 0 td..Error oti t .value 0 .7785250 0.021728 35.830648 0 . 0000e+00 .2863155 0.037789 7.576772 3.5527e-14 
